準同型暗号マスキング方式 統合テスト開始（all）
日時: 2025年05月15日 11:35:26

テスト設定:
- テストタイプ: all
- 出力ディレクトリ: test_output
- 真のテストファイル: ../common/true-false-text/t.text
- 偽のテストファイル: ../common/true-false-text/f.text
- 鍵サイズ: 1024ビット
- チャンクサイズ: 64バイト

## テスト環境情報
- Python バージョン: 3.12.8 (v3.12.8:2dc476bcb91, Dec  3 2024, 14:43:20) [Clang 13.0.0 (clang-1300.0.29.30)]
- OS: posix
- ワーキングディレクトリ: /Users/dev/works/VSCode/secret-sharing-demos-20250510


================================================================================
# 準同型暗号の基本機能テスト
================================================================================


## テストファイルの読み込み
[2025-05-15 11:35:26] エラーが発生しました: [Errno 2] No such file or directory: '../common/true-false-text/t.text'
[2025-05-15 11:35:26] Traceback (most recent call last):
  File "/Users/dev/works/VSCode/secret-sharing-demos-20250510/method_8_homomorphic/homomorphic_test.py", line 303, in test_basic_homomorphic_functions
    with open(TRUE_TEXT_PATH, 'rb') as f:
         ^^^^^^^^^^^^^^^^^^^^^^^^^^
FileNotFoundError: [Errno 2] No such file or directory: '../common/true-false-text/t.text'


================================================================================
# マスク関数テスト
================================================================================


## 準同型暗号の初期化
[2025-05-15 11:35:26] 公開鍵生成完了: n=89983611270689750275820665997163786877387952777028033155027929470803754834861917063525321461441504660598736421552338158814667716248203994819310617383300739136118899368306780319976567861172838115716220542936780393094246229042733767916409780004973940777610766403886920791380247940755105697250990138944520317597, g=89983611270689750275820665997163786877387952777028033155027929470803754834861917063525321461441504660598736421552338158814667716248203994819310617383300739136118899368306780319976567861172838115716220542936780393094246229042733767916409780004973940777610766403886920791380247940755105697250990138944520317598

## 基本マスク関数テスト
[2025-05-15 11:35:26] 基本マスク関数を生成しました
[2025-05-15 11:35:26]   真マスク: {'type': 'true_mask', 'params': {'additive': [3934404647, 2161285981, 1830684011, 3733189812], 'multiplicative': [2000463031, 654433212, 2130838268, 3292132293]}, 'seed': 'BV5/8Z3ROvuISKTI6JTqdxcQFT/O8AYnl9quFXa/gsc='}
[2025-05-15 11:35:26]   偽マスク: {'type': 'false_mask', 'params': {'additive': [480579220, 1418706478, 1982792010, 1081037358], 'multiplicative': [1710343209, 820283490, 2694703412, 815289636]}, 'seed': 'BV5/8Z3ROvuISKTI6JTqdxcQFT/O8AYnl9quFXa/gsc='}
[2025-05-15 11:35:26] 基本マスクを適用しました
[2025-05-15 11:35:27] 基本マスク関数テスト結果: 成功

## 高度マスク関数テスト
[2025-05-15 11:35:27] 高度マスク関数を生成しました
[2025-05-15 11:35:27] 高度マスクを適用しました
[2025-05-15 11:35:27] 高度マスク関数テスト結果: 成功

## マスクの統計的特性テスト
[2025-05-15 11:35:27] 基本マスクの統計:
[2025-05-15 11:35:27]   加算パラメータ平均: 1981533961.2125
[2025-05-15 11:35:27]   加算パラメータ分散: 1.5668642447280645e+18
[2025-05-15 11:35:27]   乗算パラメータ平均: 2090293149.0375
[2025-05-15 11:35:27]   乗算パラメータ分散: 1.5582111617805279e+18
[2025-05-15 11:35:27] 高度マスクの統計:
[2025-05-15 11:35:27]   加算パラメータ平均: 2141109533.32
[2025-05-15 11:35:27]   加算パラメータ分散: 1.5312602285164436e+18
[2025-05-15 11:35:27]   乗算パラメータ平均: 2150800647.9175
[2025-05-15 11:35:27]   乗算パラメータ分散: 1.5649440322619556e+18
[2025-05-15 11:35:27] マスク分布グラフを保存しました: test_output/mask_test/mask_distribution_20250515-113526.png
[2025-05-15 11:35:27] 統計的特性テスト結果: 合格

## 準同型特性の保存確認
[2025-05-15 11:35:27] 準同型特性の保存: 成功
[2025-05-15 11:35:27]   期待値: 579
[2025-05-15 11:35:27]   実際の結果: 579

================================================================================
# 識別不能性機能テスト
================================================================================


## 暗号文ランダム化テスト
[2025-05-15 11:35:27] 元の暗号文: 27473329467220801095632686021880688148703310377498272041354070987618606675462696745503570802753523113824968789408234010302840432746475957709165343941441662870872977302501743063042204850182045493117719231618904322551269589113839104707149306275244093305275716736525397554788129580353400246917521238129704611571229824803897927191374620383811699538010857844162290198267494610159681374213999300541411743664157355898790785601506194243981150366711830591955071682116838274030304961033898347649960560457416817566232308116168906970093890474989419666453417389528791663140901865742538915796707076881688837901363695989817388905188
[2025-05-15 11:35:27] ランダム化後: 9422289899887802340891016241462833033902446710789526451908236983617284669740704857134782848727959653383241387315422920015072040665853896047760468333431098090976155892519244315743562883224443418813959270701919228655442451851345073722833635342530124376928746419254496317425265980804908689502301668876975798774622374178903799243437144918661799302466250604425458406255013261471751548352220747625581456107138796956920444399092353607197033113667426470710231015990038509955772406150662226888082030307514946709539657017465397649513544656523026294861977126790139526102331787470996577322574192658755959493399244380831735971182
[2025-05-15 11:35:27] 同じ暗号文か: False
[2025-05-15 11:35:27] 元の平文: 42
[2025-05-15 11:35:27] ランダム化後の平文: 42
[2025-05-15 11:35:27] 同じ平文か: True

## 統計的ノイズテスト
[2025-05-15 11:35:27] ノイズ追加後の復号値: [37337092058970282901393886393452173912014189380809267398456705972713338611845852769273474792585635530938780866715827328859195103930999200058732860143113397876912405311725554715475732415150071797523022083061349854019714767672165203708900588984482764276788461266822774759805588412495548626265457695694449665, 57014403634260543494114890927364859211826166239730066331439488248719292827977343587395500043787209048357614018033863685411009064328650863867119154098314718917896587284703974064383994504654270625056568334613981938398383022503937293438837130917209460339090351458612285953867201786188728981886350824538221818, 140005227876018454578027719192365147468133809710406579444194242641284523085890316449731264956808936516458367657262738913893782142337066257766169874209474956337239174175400540430701034366287444240972279807220030983306658747094594433549919272059328187982328659316054347210135112807186084354735797235736017376, 70175712407896922205383261295636728285419325194781857077440017407965828041402969129568401441664261886225534928323780366415289195531929116407683416528091807983738990984173282478769911470329371155634620240454419855725496348234055087071832478830690473960406986039127218872764299994236161007760922931870987168, 106658817337042116956660300923233272778188547156226434923842811915690831424808604583318688248562078904260220759898194559068883748312113924172255753225803777427547879461301664014052700511076072984813178819458077137773810893485585446298775557130710807530962241030536846860826078604102540009870827842312342284]
[2025-05-15 11:35:27] 追加されたノイズ値: [37337092058970282901393886393452173912014189380809267398456705972713338611845852769273474792585635530938780866715827328859195103930999200058732860143113397876912405311725554715475732415150071797523022083061349854019714767672165203708900588984482764276788461266822774759805588412495548626265457695694449655, 57014403634260543494114890927364859211826166239730066331439488248719292827977343587395500043787209048357614018033863685411009064328650863867119154098314718917896587284703974064383994504654270625056568334613981938398383022503937293438837130917209460339090351458612285953867201786188728981886350824538221798, 140005227876018454578027719192365147468133809710406579444194242641284523085890316449731264956808936516458367657262738913893782142337066257766169874209474956337239174175400540430701034366287444240972279807220030983306658747094594433549919272059328187982328659316054347210135112807186084354735797235736017346, 70175712407896922205383261295636728285419325194781857077440017407965828041402969129568401441664261886225534928323780366415289195531929116407683416528091807983738990984173282478769911470329371155634620240454419855725496348234055087071832478830690473960406986039127218872764299994236161007760922931870987128, 106658817337042116956660300923233272778188547156226434923842811915690831424808604583318688248562078904260220759898194559068883748312113924172255753225803777427547879461301664014052700511076072984813178819458077137773810893485585446298775557130710807530962241030536846860826078604102540009870827842312342234]
[2025-05-15 11:35:27] ノイズ除去後の復号値: [10, 20, 30, 40, 50]
[2025-05-15 11:35:27] 元の平文と一致するか: True

## 交互配置テスト
[2025-05-15 11:35:27] 交互配置後のチャンク数: 10
[2025-05-15 11:35:27] メタデータ: {'shuffle_seed': '89df88f7066b417900a3aecdc343c0c6', 'mapping': [{'type': 'false', 'index': 4}, {'type': 'true', 'index': 0}, {'type': 'true', 'index': 4}, {'type': 'false', 'index': 3}, {'type': 'false', 'index': 1}, {'type': 'true', 'index': 3}, {'type': 'false', 'index': 0}, {'type': 'true', 'index': 1}, {'type': 'false', 'index': 2}, {'type': 'true', 'index': 2}], 'original_true_length': 5, 'original_false_length': 5}
[2025-05-15 11:35:27] 元の真の平文: [10, 11, 12, 13, 14]
[2025-05-15 11:35:27] 復元された真の平文: [10, 11, 12, 13, 14]
[2025-05-15 11:35:27] 元の偽の平文: [100, 101, 102, 103, 104]
[2025-05-15 11:35:27] 復元された偽の平文: [100, 101, 102, 103, 104]

## 冗長性テスト
[2025-05-15 11:35:28] 冗長性追加後のチャンク数: 15
[2025-05-15 11:35:28] 冗長性メタデータ: {'redundancy_factor': 2, 'original_length': 5, 'original_indices': [0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]}
[2025-05-15 11:35:28] 冗長性除去後のチャンク数: 5
[2025-05-15 11:35:28] 元の平文: [10, 11, 12, 13, 14]
[2025-05-15 11:35:28] 冗長性除去後の平文: [10, 11, 12, 13, 14]

## 総合的な識別不能性テスト
[2025-05-15 11:35:28] 識別不能性適用後の暗号文数: 20
[2025-05-15 11:35:28] 元の真の平文: [10, 11, 12, 13, 14]
[2025-05-15 11:35:28] 復元された真の平文: [10, 11, 12, 13, 14]
[2025-05-15 11:35:28] 元の偽の平文: [100, 101, 102, 103, 104]
[2025-05-15 11:35:28] 復元された偽の平文: [100, 101, 102, 103, 104]
[2025-05-15 11:35:28] 真の復元成功: True
[2025-05-15 11:35:28] 偽の復元成功: True

## 統計的識別不能性テスト
[2025-05-15 11:35:28] 元の分類精度: 0.5000
[2025-05-15 11:35:28] 識別不能性適用後の精度: 0.3500
[2025-05-15 11:35:28] 改善度: -0.1500
[2025-05-15 11:35:28] 識別不能と判定されるか: False
[2025-05-15 11:35:29] 識別不能性テスト結果グラフを保存しました: test_output/indistinguishable_test/indistinguishability_test_20250515-113526.png

## 攻撃シミュレーション：バイト分布の可視化
[2025-05-15 11:35:29] テストデータの読み込みエラー: [Errno 2] No such file or directory: '../common/true-false-text/t.text'
[2025-05-15 11:35:29] サンプルデータを使用します。
[2025-05-15 11:35:30] バイト分布プロット保存先: test_output/indistinguishable_test/indistinguishable_byte_distribution_20250515-113526.png

## 攻撃シミュレーション：統計的分析
[2025-05-15 11:35:30] 
真のデータの特徴量:
[2025-05-15 11:35:30]   平均値: 97.500000
[2025-05-15 11:35:30]   エントロピー: 3.899244
[2025-05-15 11:35:30]   分散: 702.181034
[2025-05-15 11:35:30]   相関: 9493.122807
[2025-05-15 11:35:30] 
偽のデータの特徴量:
[2025-05-15 11:35:30]   平均値: 97.118644
[2025-05-15 11:35:30]   エントロピー: 3.914898
[2025-05-15 11:35:30]   分散: 680.680839
[2025-05-15 11:35:30]   相関: 9425.620690
[2025-05-15 11:35:30] 
真の鍵で復号したデータの特徴量:
[2025-05-15 11:35:30]   平均値: 97.500000
[2025-05-15 11:35:30]   エントロピー: 3.899244
[2025-05-15 11:35:30]   分散: 702.181034
[2025-05-15 11:35:30]   相関: 9493.122807
[2025-05-15 11:35:30] 
偽の鍵で復号したデータの特徴量:
[2025-05-15 11:35:30]   平均値: 97.500000
[2025-05-15 11:35:30]   エントロピー: 3.899244
[2025-05-15 11:35:30]   分散: 702.181034
[2025-05-15 11:35:30]   相関: 9493.122807
[2025-05-15 11:35:30] 
真と偽のデータの特徴量の平均絶対差: 22.349831
[2025-05-15 11:35:30] 復号データ間の特徴量の平均絶対差: 0.000000
[2025-05-15 11:35:30] 差異の比率（復号/元）: 0.000000
[2025-05-15 11:35:30] 
結論: 攻撃者は統計的分析によって復号データを区別することはほぼ不可能です。

================================================================================
# セキュリティ特性テスト
================================================================================


## 暗号文識別不能性テスト
[2025-05-15 11:35:30] エラーが発生しました: [Errno 2] No such file or directory: '../common/true-false-text/t.text'
[2025-05-15 11:35:30] Traceback (most recent call last):
  File "/Users/dev/works/VSCode/secret-sharing-demos-20250510/method_8_homomorphic/homomorphic_test.py", line 885, in test_security_features
    with open(TRUE_TEXT_PATH, 'rb') as f:
         ^^^^^^^^^^^^^^^^^^^^^^^^^^
FileNotFoundError: [Errno 2] No such file or directory: '../common/true-false-text/t.text'


================================================================================
# 拡張セキュリティテスト
================================================================================

[2025-05-15 11:35:30] テストファイルを生成しました: test_output/secure_true.txt, test_output/secure_false.txt

## 元の実装での暗号化テスト
[2025-05-15 11:35:30] 元の実装での暗号化時間: 0.033811秒
[2025-05-15 11:35:30] 元の実装での暗号化ファイルサイズ: 3350バイト
[2025-05-15 11:35:30] 元の実装での'true'文字列の含有: True
[2025-05-15 11:35:30] 元の実装での'false'文字列の含有: True

## 改良実装での暗号化テスト
[2025-05-15 11:35:30] 改良実装での暗号化時間: 0.137020秒
[2025-05-15 11:35:30] 改良実装での暗号化ファイルサイズ: 2426バイト
[2025-05-15 11:35:30] 改良実装での'true'文字列の含有: False
[2025-05-15 11:35:30] 改良実装での'false'文字列の含有: False
[2025-05-15 11:35:30] 複数回の暗号化で結果が変化するか: True

## 復号時間の比較
[2025-05-15 11:35:30] 元の実装での復号テスト:
[2025-05-15 11:35:30]   trueキーでの復号時間: 0.027668秒
[2025-05-15 11:35:31]   falseキーでの復号時間: 0.027916秒
[2025-05-15 11:35:31] 改良実装での復号テスト:
[2025-05-15 11:35:31] 復号時間比較テストでエラーが発生しました: 鍵情報ファイルが見つかりません: test_output/improved/key_info_20250515-113526.json
[2025-05-15 11:35:31] Traceback (most recent call last):
  File "/Users/dev/works/VSCode/secret-sharing-demos-20250510/method_8_homomorphic/indistinguishable_ext.py", line 534, in decrypt_file_with_key
    with open(key_file, 'r') as f:
         ^^^^^^^^^^^^^^^^^^^
FileNotFoundError: [Errno 2] No such file or directory: 'test_output/improved/key_info_20250515-113526.json'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/dev/works/VSCode/secret-sharing-demos-20250510/method_8_homomorphic/homomorphic_test.py", line 1551, in test_decryption_times
    decrypt_file_with_key(
  File "/Users/dev/works/VSCode/secret-sharing-demos-20250510/method_8_homomorphic/indistinguishable_ext.py", line 537, in decrypt_file_with_key
    raise FileNotFoundError(f"鍵情報ファイルが見つかりません: {key_file}")
FileNotFoundError: 鍵情報ファイルが見つかりません: test_output/improved/key_info_20250515-113526.json


## 比較グラフの生成
[2025-05-15 11:35:31] ファイルサイズ比較グラフを保存しました: test_output/charts/file_size_comparison_20250515-113526.png
[2025-05-15 11:35:31] 処理時間比較グラフを保存しました: test_output/charts/processing_time_comparison_20250515-113526.png

## 暗号方式の比較表
[2025-05-15 11:35:31] | 項目 | 元の実装 | 改良後の実装 |
[2025-05-15 11:35:31] | -|-|- |
[2025-05-15 11:35:31] | 暗号化方式 | Paillier (加法準同型) | Paillier (加法準同型) |
[2025-05-15 11:35:31] | 識別子 | 明示的 ('true'/'false') | 暗号化ハッシュによる難読化 |
[2025-05-15 11:35:31] | チャンク順序 | 固定 | ランダム化 |
[2025-05-15 11:35:31] | マスク方式 | 基本マスク関数 | 高度マスク関数 (オプション) |
[2025-05-15 11:35:31] | 暗号文の一貫性 | 一貫（同一入力で同一出力） | 非一貫（同一入力で異なる出力） |
[2025-05-15 11:35:31] | ソース解析耐性 | 低 | 高 |
[2025-05-15 11:35:31] | タイミング攻撃耐性 | 低〜中 | 中〜高 |
[2025-05-15 11:35:31] | 復号速度 | やや速い | 標準 |

================================================================================
# パフォーマンステスト
================================================================================


## 鍵生成パフォーマンス
[2025-05-15 11:35:31] 512ビット鍵の生成時間を測定...
[2025-05-15 11:35:31]   512ビット鍵の生成時間: 0.005694秒
[2025-05-15 11:35:31] 1024ビット鍵の生成時間を測定...
[2025-05-15 11:35:31]   1024ビット鍵の生成時間: 0.066511秒
[2025-05-15 11:35:31] 2048ビット鍵の生成時間を測定...
[2025-05-15 11:35:32]   2048ビット鍵の生成時間: 0.877161秒

## 暗号化パフォーマンス（サイズ別）
[2025-05-15 11:35:32] 100バイトのデータで暗号化時間を測定...
[2025-05-15 11:35:32]   100バイト暗号化時間: 0.053060秒
[2025-05-15 11:35:32] 1000バイトのデータで暗号化時間を測定...
[2025-05-15 11:35:32]   1000バイト暗号化時間: 0.436034秒
[2025-05-15 11:35:32] 10000バイトのデータで暗号化時間を測定...
[2025-05-15 11:35:36]   10000バイト暗号化時間: 4.120709秒

## 復号パフォーマンス（サイズ別）
[2025-05-15 11:35:41] 100バイトのデータで復号時間を測定...
[2025-05-15 11:35:41]   100バイト復号時間: 0.055775秒
[2025-05-15 11:35:41] 1000バイトのデータで復号時間を測定...
[2025-05-15 11:35:41]   1000バイト復号時間: 0.436408秒
[2025-05-15 11:35:41] 10000バイトのデータで復号時間を測定...
[2025-05-15 11:35:45]   10000バイト復号時間: 4.272307秒

## スケーリング特性
[2025-05-15 11:35:45] 鍵サイズ 512ビット, データサイズ 1000バイトのスケーリングテスト...
[2025-05-15 11:35:45]   暗号化時間: 0.041434秒, 復号時間: 0.026006秒
[2025-05-15 11:35:45] 鍵サイズ 1024ビット, データサイズ 1000バイトのスケーリングテスト...
[2025-05-15 11:35:46]   暗号化時間: 0.198397秒, 復号時間: 0.174606秒

## パフォーマンスグラフ生成
[2025-05-15 11:35:46] パフォーマンスグラフを保存しました: test_output/performance_test/performance_graph_20250515-113546.png
[2025-05-15 11:35:46] パフォーマンスデータを保存しました: test_output/performance_test/performance_data_20250515-113546.json

================================================================================
# 検証結果レポートの作成
================================================================================


====== 準同型暗号マスキング方式 検証結果 ======
元の真ファイルハッシュ: 
復号された真ファイルハッシュ: 
真ファイル一致: 成功 ✅
元の偽ファイルハッシュ: 
復号された偽ファイルハッシュ: 
偽ファイル一致: 成功 ✅
検証結果グラフを保存しました: test_output/verification_result_20250515-113526.png

✅ 検証成功: 準同型暗号マスキング方式は正しく機能しています。
  - 真の鍵で復号すると元の真ファイルが得られます。
  - 偽の鍵で復号すると元の偽ファイルが得られます。
  - 攻撃者はソースコードを入手しても復号結果の真偽を判別できません。

================================================================================
# テスト結果レポートの生成
================================================================================

テスト結果レポートを生成しました: test_output/homomorphic_test_report_20250515-113526.md
## テスト完了
- 合計実行時間: 20.13秒
- テスト結果レポート: test_output/homomorphic_test_report_20250515-113526.md
- ログファイル: test_output/homomorphic_test_log_20250515-113526.txt
- 成功したテスト: 3/6
### 一部のテストが失敗しました ❌
