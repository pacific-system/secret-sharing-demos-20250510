=== 暗号学的ハニーポット方式 - 改変耐性テスト ===
実行日時: 2025-05-14 15:57:37
Python バージョン: 3.12.8 (v3.12.8:2dc476bcb91, Dec  3 2024, 14:43:20) [Clang 13.0.0 (clang-1300.0.29.30)]
テスト開始...

モジュール改変シミュレーション:

モジュール 'trapdoor' の改変シミュレーション:
"""
トラップドア関数モジュール

マスター鍵から正規鍵と非正規鍵を生成し、入力鍵が正規かどうかを
数学的に判定する機能を提供します。この判定ロジックはソースコード
...

モジュール 'key_verification' の改変シミュレーション:
"""
鍵検証機構モジュール

入力された鍵が正規のものか非正規のものかを安全に検証し、
適切な処理経路を選択するための機能を提供します。
...

モジュール 'deception' の改変シミュレーション:
"""
スクリプト改変耐性モジュール

ソースコードが解析・改変された場合でも、鍵による真偽判定機能を
維持するための防御機構を提供します。攻撃者によるソースコード解析や
...

=== 判定関数の複雑性と難読化のテスト ===
判定関数の数: 5
関数の評価 - 重み: 1, 正規: False, 非正規: False
関数の評価 - 重み: 1, 正規: False, 非正規: False
関数の評価 - 重み: 3, 正規: False, 非正規: False
関数の評価 - 重み: 1, 正規: False, 非正規: False
関数の評価 - 重み: 3, 正規: False, 非正規: False
正規鍵に対するTrue判定の関数数: 0/5
非正規鍵に対するFalse判定の関数数: 5/5
最終的な正規鍵経路選択: true
最終的な非正規鍵経路選択: false

=== 動的経路選択のテスト ===
正規鍵の経路選択結果: true
非正規鍵の経路選択結果: false
正規鍵の経路選択結果（複数回）: ['true', 'true', 'true', 'true', 'true']
非正規鍵の経路選択結果（複数回）: ['false', 'false', 'false', 'false', 'false']

=== モジュール整合性検証のテスト ===
モジュール 'trapdoor' のハッシュ: 06c0e8e9a0253c74e69ed8dfd9fbe0142be0763fb671871c934c7ed73efe3370
モジュール 'key_verification' のハッシュ: 781e65a06f8a5a51ac7d8d898564f6937764ea6f2cc4220fd0d4ece002da5ade
モジュール 'honeypot_capsule' のハッシュ: db8ace04a10f440392755dcda1b385c85514dcfd152ad70ead13dfd620d668b2
モジュール 'encrypt' のハッシュ: 41d7a6b74bac97557ddd5e30e123a00a932292a306c8465f24774fcb6c44b422
モジュール 'decrypt' のハッシュ: 36be8966bd4cf8745fc3e558ab8f23822d90232dc337679df01b997cd8118755
モジュール 'deception' のハッシュ: b04c42766797afabdee60afbec086d0eeb89a640b36a3f99fe03350e353c2ebc
モジュール 'trapdoor' の整合性検証インターフェイスを確認: 成功
モジュール 'encrypt' の整合性検証インターフェイスを確認: 成功
モジュール 'decrypt' の整合性検証インターフェイスを確認: 成功

=== 難読化された検証機構のテスト ===
正規鍵の検証結果: True
非正規鍵の検証結果: False
正規鍵の検証結果（複数回）: [True, True, True, True, True]
非正規鍵の検証結果（複数回）: [False, False, False, False, False]

=== 改変耐性を備えた検証のテスト ===
正規鍵の検証結果: true
非正規鍵の検証結果: false
改変後の正規鍵の検証結果: false
改変後の非正規鍵の検証結果: false

テスト完了。
